package br.com.espacomei.controller;

import static org.hamcrest.Matchers.*;
import static org.mockito.BDDMockito.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import br.com.espacomei.model.Segments;
import br.com.espacomei.model.accounts.Segment;

@RunWith(SpringRunner.class)
@WebMvcTest(secure = false)
public class SegmentRestControllerTest {
	
	@Autowired
    private MockMvc mvc;
	
	@MockBean
	private Segments segmentsService;
	
	@Test
	public void givenSegments_whenList_thenReturnJsonArray()
	  throws Exception {
	    
	    List<Segment> allSegments = Arrays.asList(
	    		new Segment(null,"Revistaria"),
	    		new Segment(null,"Livraria")
	    		);
	    
	    given(segmentsService.listSegment()).willReturn(allSegments);
	 
	    mvc.perform(get("/api/segments/")
	      .contentType(MediaType.APPLICATION_JSON))
	      .andExpect(status().isOk())
	      .andExpect(jsonPath("$", hasSize(2)))
	      .andExpect(jsonPath("$[0].description", is("Revistaria")));
	    
	    
	}
	
	@Test
	public void givenSegmentId_whengetSegmentById_thenReturnSegment() 
			throws Exception {
		
		UUID id = UUID.randomUUID();
		UUID id2 = UUID.randomUUID();
		String strId = id.toString();
		String endpoint = "/api/segments/" + strId;
		Segment seg = new Segment(id, "Tabacaria");
		
		given(segmentsService.getSegmentById()).willReturn(Optional.of(seg));
		
	    mvc.perform(get(endpoint)
	  	      .contentType(MediaType.APPLICATION_JSON))
	  	      .andExpect(status().isOk())
	  	      .andExpect(jsonPath("$.description", is("Tabacaria")))
	    	  .andExpect(jsonPath("$.id", is(strId)));
		
		
	}
	
	
	
}
